<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.NeuChar</name>
    </assembly>
    <members>
        <member name="T:Senparc.NeuChar.Agents.MessageAgent">
            <summary>
            代理请求
            注意！使用代理必然导致网络访问节点增加，会加重响应延时，
                  因此建议准备至少2-3秒的延迟时间的准备，
                  如果增加2-3秒后远远超过5秒的微信服务器等待时间，
                  需要慎重使用，否则可能导致用户无法收到消息。
            
            此外这个类中的方法也可以用于模拟服务器发送消息到自己的服务器进行测试。
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Agents.MessageAgent.AGENT_TIME_OUT">
            <summary>
            默认代理请求超时时间（毫秒）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestXml(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            获取Xml结果。
            </summary>
            <param name="messageHandler"></param>
            <param name="url"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="token"></param>
            <param name="stream"></param>
            <param name="useNeuCharKey">是否使用WeiWeiHiKey，如果使用，则token为WeiWeiHiKey</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestXml(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            获取Xml结果
            </summary>
            <param name="messageHandler"></param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeuCharXml(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Int32)">
            <summary>
            对接 NeuChar 平台，获取Xml结果，使用WeiWeiHiKey对接
            WeiWeiHiKey的获取方式请看：
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <param name="neucharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            获取ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="stream"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            获取ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeuCharResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <param name="neuCharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestWeiweihiResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.Xml.Linq.XDocument,System.String,System.Int32)">
            <summary>
            获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="neuCharDomainName"></param>
            <param name="document"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestWeiweihiResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,Senparc.NeuChar.Entities.RequestMessageBase,System.String,System.Int32)">
            <summary>
            获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="requestMessage"></param>
            <param name="neuCharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.CheckUrlAndToken(System.String,System.String,System.Int32)">
            <summary>
            使用GET请求测试URL和TOKEN是否可用
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestXmlAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            【异步方法】获取Xml结果。
            </summary>
            <param name="messageHandler"></param>
            <param name="url"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="token"></param>
            <param name="stream"></param>
            <param name="useNeuCharKey">是否使用WeiWeiHiKey，如果使用，则token为WeiWeiHiKey</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestXmlAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            【异步方法】获取Xml结果
            </summary>
            <param name="messageHandler"></param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeuCharXmlAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Int32)">
            <summary>
            【异步方法】对接 NeuChar 平台，获取Xml结果，使用WeiWeiHiKey对接
            WeiWeiHiKey的获取方式请看：
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <param name="neucharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestResponseMessageAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            【异步方法】获取ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="stream"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestResponseMessageAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            【异步方法】获取ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="autoFillUrlParameters">是否自动填充Url中缺少的参数（signature、timestamp、nonce），默认为 true</param>
            <param name="url"></param>
            <param name="token"></param>
            <param name="xml"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeucharResponseMessageAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.String,System.String,System.Int32)">
            <summary>
            【异步方法】获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="xml"></param>
            <param name="neuCharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeucharResponseMessage(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,System.Xml.Linq.XDocument,System.String,System.Int32)">
            <summary>
            【异步方法】获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="neuCharDomainName"></param>
            <param name="document"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.RequestNeuCharResponseMessageAsync(Senparc.NeuChar.MessageHandlers.IMessageHandlerBase,System.String,Senparc.NeuChar.Entities.RequestMessageBase,System.String,System.Int32)">
            <summary>
            【异步方法】获取 NeuChar 开放平台的ResponseMessge结果
            </summary>
            <param name="messageHandler"></param>
            <param name="weiweihiKey"></param>
            <param name="requestMessage"></param>
            <param name="neuCharDomainName"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Agents.MessageAgent.CheckUrlAndTokenAsync(System.String,System.String,System.Int32)">
            <summary>
            【异步方法】使用GET请求测试URL和TOKEN是否可用
            </summary>
            <param name="url"></param>
            <param name="token"></param>
            <param name="timeOut">代理请求超时时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.ApiBindAttribute">
            <summary>
            自动绑定属性
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBindAttribute.PlatformType">
            <summary>
            平台类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBindAttribute.Name">
            <summary>
            平台内唯一名称（如使用 PlatformType.General，请使用宇宙唯一名称）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBindAttribute.NeedAccessToken">
            <summary>
            是否需要使用 AccessToken
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiBindAttribute.#ctor">
            <summary>
            ApiBindAttributes 构造函数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiBindAttribute.#ctor(Senparc.NeuChar.PlatformType,System.String,System.Boolean)">
            <summary>
            ApiBindAttributes 构造函数
            </summary>
            <param name="platformType">平台类型</param>
            <param name="name">平台内唯一名称（如使用 PlatformType.General，请使用宇宙唯一名称）</param>
            <param name="needAccessToken">是否需要使用 AccessToken</param>
        </member>
        <member name="T:Senparc.NeuChar.ApiBindInfo">
            <summary>
            ApiBind 属性所绑定的方法信息（Mapping）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBindInfo.ApiBindAttribute">
            <summary>
            ApiBindAttribute
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBindInfo.MethodInfo">
            <summary>
            绑定 API 方法对象信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ApiBind.ApiBindInfoCollection">
            <summary>
            ApiBind 绑定信息的全局唯一集合
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiBind.ApiBindInfoCollection.GetGlobalName(Senparc.NeuChar.PlatformType,System.String)">
            <summary>
            获取全局唯一名称
            </summary>
            <param name="platformType">PlatformType</param>
            <param name="apiBindAttrName">跨程序集的通用名称（如：CustomApi.SendText）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.ApiBind.ApiBindInfoCollection.#ctor">
            <summary>
            ApiBindCollection 构造函数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiBind.ApiBindInfoCollection.Add(System.Reflection.MethodInfo,Senparc.NeuChar.ApiBindAttribute)">
            <summary>
            添加 ApiBindInfo 对象
            </summary>
            <param name="method"></param>
            <param name="apiBindAttr"></param>
        </member>
        <member name="M:Senparc.NeuChar.ApiBind.ApiBindInfoCollection.Get(Senparc.NeuChar.PlatformType,System.String)">
            <summary>
            获取 ApiBindInfo
            </summary>
            <param name="platformType">PlatformType</param>
            <param name="apiBindAttrName">跨程序集的通用名称（如：CustomApi.SendText）</param>
        </member>
        <member name="M:Senparc.NeuChar.ApiBind.ApiBindInfoCollection.GetGroupedCollection">
            <summary>
            获取不同模块的分组 API 绑定信息（注意：每次获取都会重新执行分组过程）
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.ApiBind.ApiBindJson">
            <summary>
            ApiBind Json 设置格式
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBind.ApiBindJson.name">
            <summary>
            全局唯一名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiBind.ApiBindJson.parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ApiHandlers.ApiEnlightener">
            <summary>
            API信息初始化
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiHandlers.ApiEnlightener.PlatformType">
            <summary>
            支持平台类型
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlightener.SendText(System.String,System.String,System.String)">
            <summary>
            发送文本消息
            </summary>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlightener.SendNews(System.String,System.String,System.Collections.Generic.List{Senparc.NeuChar.Entities.Article})">
            <summary>
            发送多图文信息
            </summary>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <param name="articleList"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlightener.SendImage(System.String,System.String,System.String)">
            <summary>
            发送图片消息
            </summary>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <param name="mediaId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlightener.CustomApi(Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.NeuralSystems.MaterialData,System.String)">
            <summary>
            调用自定义接口（使用ApiBind特性）
            </summary>
            <param name="response">响应设置信息</param>
            <param name="materialData"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.ApiHandlers.ApiHandler">
            <summary>
            ApiHandler
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ApiHandlers.ApiHandler.ApiEnlighten">
            <summary>
            ApiEnlightener
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiHandler.#ctor(Senparc.NeuChar.ApiHandlers.ApiEnlightener)">
            <summary>
            ApiHandler
            </summary>
            <param name="apiEnlighten"></param>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiHandler.ExecuteApi(Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.NeuralSystems.MaterialData,Senparc.NeuChar.Entities.IRequestMessageBase,System.String,System.String,Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener)">
            <summary>
            执行API
            </summary>
            <param name="response"></param>
            <param name="materialData"></param>
            <param name="requestMessage"></param>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContextGlobalConfig">
            <summary>
            消息上下文全局设置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Context.MessageContextGlobalConfig.CACHE_KEY_PREFIX">
            <summary>
            缓存键前缀
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContextGlobalConfig.UseMessageContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContextGlobalConfig.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间（分钟），默认 30
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContextGlobalConfig.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息），默认 20
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.GlobalMessageContext`3">
            <summary>
            微信消息上下文操作对象（全局）
            默认过期时间：90分钟
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间（分钟）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetExpireTimeSpan(System.Nullable{System.Double})">
            <summary>
            获取过期时间 TimeSpan 对象
            </summary>
            <param name="expireMinutes"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.Restore">
            <summary>
            重置所有上下文参数，所有记录将被清空（如果缓存数据比较多，性能开销将会比较大，请谨慎操作）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">true：如果用户不存在，则创建一个实例，并返回这个最新的实例
            false：如用户不存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(`1)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(`2)">
            <summary>
            获取MessageContext，如果不存在，使用responseMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessage(`1,`0)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
            <param name="messageContext">上下文消息列表，如果为空，测自动从缓存中获取</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessage(`2,`0)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
            <param name="messageContext">上下文消息列表，如果为空，测自动从缓存中获取</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastRequestMessage(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastResponseMessage(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.UpdateMessageContext(`0)">
            <summary>
            更新上下文
            </summary>
            <param name="messageContext"></param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.RestoreAsync">
            <summary>
            重置所有上下文参数，所有记录将被清空（如果缓存数据比较多，性能开销将会比较大，请谨慎操作）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContextAsync(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">true：如果用户不存在，则创建一个实例，并返回这个最新的实例
            false：如用户不存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContextAsync(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContextAsync(`1)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContextAsync(`2)">
            <summary>
            获取MessageContext，如果不存在，使用responseMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessageAsync(`1,`0)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
            <param name="messageContext">上下文消息列表，如果为空，测自动从缓存中获取</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessageAsync(`2,`0)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
            <param name="messageContext">上下文消息列表，如果为空，测自动从缓存中获取</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastRequestMessageAsync(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastResponseMessageAsync(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.UpdateMessageContextAsync(`0)">
            <summary>
            更新上下文
            </summary>
            <param name="messageContext"></param>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContextJsonConverter`3">
            <summary>
            Json 反序列化时用到的 JsonConverter
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContainer`1">
            <summary>
            消息容器（列表）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContainer`1.MaxRecordCount">
            <summary>
            最大记录条数（保留尾部），如果小于等于0则不限制
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContainer`1.RemoveExpressItems">
            <summary>
            移除超出限制的上下文记录
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.IMessageContext`2">
            <summary>
            微信消息上下文（单个用户）接口
            </summary>
            <typeparam name="TRequest">请求消息类型</typeparam>
            <typeparam name="TResponse">响应消息类型</typeparam>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.UserName">
            <summary>
            用户名（OpenID）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.ThisActiveTime">
            <summary>
            本次活动时间（当前消息收到的时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.RequestMessages">
            <summary>
            接收消息记录
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.ResponseMessages">
            <summary>
            响应消息记录
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.MaxRecordCount">
            <summary>
            最大储存容量（分别针对RequestMessages和ResponseMessages）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.StorageDataTypeName">
            <summary>
            StorageData的类型名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.StorageDataType">
            <summary>
            StorageData的类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.StorageData">
            <summary>
            临时储存数据，如用户状态等，出于保持.net 3.5版本，这里暂不使用dynamic
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.ExpireMinutes">
            <summary>
            用于覆盖WeixinContext所设置的默认过期时间
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.CurrentAppDataItem">
            <summary>
            当前正在服务的 AppDataItem
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.IMessageContext`2.GetRequestEntityMappingResult(Senparc.NeuChar.RequestMsgType,System.Xml.Linq.XDocument)">
            <summary>
            从 Xml 转换 RequestMessage 对象的处理（只是创建实例，不填充数据） 
            </summary>
            <param name="requestMsgType">RequestMsgType</param>
            <param name="doc">RequestMessage 的明文 XML</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.IMessageContext`2.GetResponseEntityMappingResult(Senparc.NeuChar.ResponseMsgType,System.Xml.Linq.XDocument)">
            <summary>
            从 Xml 转换 RequestMessage 对象的处理（只是创建实例，不填充数据） 
            </summary>
            <param name="responseMsgType">RequestMsgType</param>
            <param name="doc">ResponseMessage 的明文 XML</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContext`2">
            <summary>
            微信消息上下文（单个用户）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.UserName">
            <summary>
            用户识别ID（微信中为 OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.ThisActiveTime">
            <summary>
            本次活动时间（当前消息收到的时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.MaxRecordCount">
            <summary>
            最大允许记录数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.StorageDataTypeName">
            <summary>
            StorageData的类型名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.StorageDataType">
            <summary>
            StorageData的类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.CurrentAppDataItem">
            <summary>
            当前正在服务的 AppDataItem
            </summary>
        </member>
        <member name="E:Senparc.NeuChar.Context.MessageContext`2.MessageContextRemoved">
            <summary>
            当MessageContext被删除时触发的事件
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.OnMessageContextRemoved(Senparc.NeuChar.Context.WeixinContextRemovedEventArgs{`0,`1})">
            <summary>
            执行上下文被移除的事件
            注意：此事件不是实时触发的，而是等过期后任意一个人发过来的下一条消息执行之前触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.GetRequestEntityMappingResult(Senparc.NeuChar.RequestMsgType,System.Xml.Linq.XDocument)">
            <summary>
            从 Xml 转换 RequestMessage 对象的处理（只是创建实例，不填充数据） 
            </summary>
            <param name="requestMsgType">RequestMsgType</param>
            <param name="doc">RequestMessage 的明文 XML</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.GetResponseEntityMappingResult(Senparc.NeuChar.ResponseMsgType,System.Xml.Linq.XDocument)">
            <summary>
            从 Xml 转换 RequestMessage 对象的处理（只是创建实例，不填充数据） 
            </summary>
            <param name="responseMsgType">RequestMsgType</param>
            <param name="doc">ResponseMessage 的明文 XML</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.OnRemoved">
            <summary>
            此上下文被清除的时候触发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageQueue`3">
            <summary>
            微信消息队列（所有微信账号的往来消息）
            </summary>
            <typeparam name="TMC">IMessageContext&lt;TRequest, TResponse&gt;</typeparam>
            <typeparam name="TRequest">IRequestMessageBase</typeparam>
            <typeparam name="TResponse">IResponseMessageBase</typeparam>
        </member>
        <member name="T:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2">
            <summary>
            对话上下文被删除时触发事件的事件数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.OpenId">
            <summary>
            该用户的OpenId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.LastActiveTime">
            <summary>
            最后一次响应时间
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.MessageContext">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Enlightener.IEnlightener">
            <summary>
            所有 Enlightener 定义的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Enlightener.IEnlightener.PlatformType">
            <summary>
            支持平台类型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.ConfigParamModel">
            <summary>
            App 输入输出实体
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.ConfigParamModel.InputParams">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.ConfigParamModel.OutputParams">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.ConfigParamModel.ForceAutoStart">
            <summary>
            是否强制为自动开始
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.ConfigParamModel.ForceHide">
            <summary>
            是否强制为隐藏流程
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.ConfigParamModel.AdminUrl">
            <summary>
            后台管理 Url
            <para>如：https://neuchar.weiweihi.com/User/QuestionActivity?app={appId}</para>
            <para>appId 是 InputParams 中 Name 为 appId 的值进行替换</para>
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.BaseParam">
            <summary>
            App 参数基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.BaseParam.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.BaseParam.ParamId">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.BaseParam.Presentation">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.InputParam">
            <summary>
            App 输入参数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputParam.IsRequired">
            <summary>
            必填参数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputParam.Value">
            <summary>
            输入内容[不需要提供]
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputParam.OptionValues">
            <summary>
            App提供选项
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputParam.AutoFillUrl">
            <summary>
            自动填充数据接口地址
            <para>如：https://neuchar.weiweihi.com/User/AutoFillWindow?app={appId}</para>
            <para>appId 是 InputParams 中 Name 为 appId 的值进行替换</para>
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.OutputParam">
            <summary>
            App 输出参数
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputParam.Value">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.InputPostModel">
            <summary>
            应用中枢发送到App数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputPostModel.PostData">
            <summary>
            App 输入参数集合
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputPostModel.StepId">
            <summary>
            步骤编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputPostModel.WorkflowId">
            <summary>
            应用中枢编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.InputPostModel.AppVersion">
            <summary>
            App当前配置版本号
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.OutputPostModel">
            <summary>
            App发送到应用中枢数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputPostModel.PostData">
            <summary>
            App 输出参数集合
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputPostModel.OpenId">
            <summary>
            用户OpenId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputPostModel.StepId">
            <summary>
            步骤编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputPostModel.WorkflowId">
            <summary>
            应用中枢编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.OutputPostModel.AppVersion">
            <summary>
            App当前配置版本号
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.PullConfigRequestData">
            <summary>
            拉取请求的数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.PullConfigRequestData.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.PullConfigRequestData.AppId">
            <summary>
            NeuChar App Id
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.App.PushConfigRequestData">
            <summary>
            拉取请求的数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.PushConfigRequestData.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.PushConfigRequestData.AppId">
            <summary>
            NeuChar App Id
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.App.PushConfigRequestData.Config">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ArticleData">
            <summary>
            图文数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.ThumbCoverUrl">
            <summary>
            封面图地址
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.Digest">
            <summary>
            摘要
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.ContentSourceUrl">
            <summary>
            原地址
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ArticleData.ArticleIds">
            <summary>
            多图文
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IEntityBase">
            <summary>
            所有微信自定义实体的基础接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IMessageBase">
            <summary>
            所有Request和Response消息的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.ToUserName">
            <summary>
            接收人（在 Request 中为公众号的微信号，在 Response 中为 OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.FromUserName">
            <summary>
            发送人（在 Request 中为OpenId，在 Response 中为公众号的微信号）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.CreateTime">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.MessageBase">
            <summary>
            所有Request和Response消息的基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.ToUserName">
            <summary>
            接收人（在 Request 中为公众号的微信号，在 Response 中为 OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.FromUserName">
            <summary>
            发送人（在 Request 中为OpenId，在 Response 中为公众号的微信号）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.CreateTime">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.MessageBase.ToString">
            <summary>
            ToString() 方法重写
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageSelectMenu">
            <summary>
            选择菜单点击后的请求接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageSelectMenu.bizmsgmenuid">
            <summary>
            选择菜单Id（对应微信 SendMenu 接口）
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.SELECT_MENU_KEWORD_FORMAT">
            <summary>
            选择菜单（对应微信 SendMenu 接口）的关键字格式，{0}代表客户端识别的关键字
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.DefaultMessage">
            <summary>
            DefaultMessage
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.SelectMenuId">
            <summary>
            选择菜单Id（对应微信 SendMenu 接口所设置的 id 参数）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.MatchSuccessed">
            <summary>
            是否已经匹配成功
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.CaseSensitive">
            <summary>
            是否大小写敏感
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension">
            <summary>
            RequestMessageText 扩展
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.StartHandler(Senparc.NeuChar.Entities.IRequestMessageText,System.Boolean)">
            <summary>
            开始匹配
            </summary>
            <param name="requestMessage"></param>
            <param name="caseSensitive">是否大小写敏感，默认为false</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.GetResponseMessage(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler)">
            <summary>
            获取最终响应消息
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Keyword(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配关键词
            </summary>
            <param name="handler"></param>
            <param name="keyword">关键词</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Keywords(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String[],System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配关键词（只要有一个满足即可触发）
            </summary>
            <param name="handler"></param>
            <param name="keywords">多个关键词</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.SelectMenuKeyword(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配选择菜单关键词（对应微信的 SendMenu 接口）
            </summary>
            <param name="handler"></param>
            <param name="keywords">多个关键词（匹配格式："s:[关键词]"）</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.SelectMenuKeywords(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String[],System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配选择菜单关键词（对应微信的 SendMenu 接口）
            </summary>
            <param name="handler"></param>
            <param name="keywords">多个关键词（匹配格式："s:[关键词]"）</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Regex(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配正则表达式
            </summary>
            <param name="handler"></param>
            <param name="pattern">正则表达式</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Default(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            默认消息
            </summary>
            <param name="handler"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Default(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.Func{System.Threading.Tasks.Task{Senparc.NeuChar.Entities.IResponseMessageBase}})">
            <summary>
            【异步方法】默认消息
            </summary>
            <param name="handler"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageEventKey">
            <summary>
            具有EventKey属性的RequestMessage接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageEventKey.EventKey">
            <summary>
            EventKey值
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.Count">
            <summary>
            消息数量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.ResultList">
            <summary>
            各个单图文校验结果
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.CheckState">
            <summary>
            整体校验结果 1-未被判为转载，可以群发，2-被判为转载，可以群发，3-被判为转载，不能群发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList">
            <summary>
            单图文校验结果
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item">
            <summary>
            单图文校验结果
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.ArticleIdx">
            <summary>
            群发文章的序号，从1开始
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.UserDeclareState">
            <summary>
            用户声明文章的状态
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.AuditState">
            <summary>
            系统校验的状态
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.OriginalArticleUrl">
            <summary>
            相似原创文的url
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.OriginalArticleType">
            <summary>
            相似原创文的类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.CanReprint">
            <summary>
            是否能转载
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.NeedReplaceContent">
            <summary>
            是否需要替换成原创文内容
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.NeedShowReprintSource">
            <summary>
            是否需要注明转载来源
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ScanCodeInfo">
            <summary>
            扫码事件中的ScanCodeInfo
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SendLocationInfo">
            <summary>
            弹出地理位置选择器的事件推送中的SendLocationInfo
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Location_X">
            <summary>
            X坐标信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Location_Y">
            <summary>
            Y坐标信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Scale">
            <summary>
            精度，可理解为精度或者比例尺、越精细的话 scale越高
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Label">
            <summary>
            地理位置的字符串信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Poiname">
            <summary>
            朋友圈POI的名字，可能为空
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SendPicsInfo">
            <summary>
            系统拍照发图中的SendPicsInfo
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendPicsInfo.Count">
            <summary>
            发送的图片数量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendPicsInfo.PicList">
            <summary>
            图片列表
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Md5Sum.PicMd5Sum">
            <summary>
            图片的MD5值，开发者若需要，可用于验证接收到图片
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.BaseBeaconItem">
            <summary>
            Beacon的参数以及距离
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.BaseBeaconItem.Distance">
            <summary>
            设备与用户的距离（浮点数；单位：米）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo">
            <summary>
            第三方快速注册小程序的注册审核事件推送中的info
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.name">
            <summary>
            企业名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.code">
            <summary>
            企业代码
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.code_type">
            <summary>
            企业代码类型 
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.legal_persona_wechat">
            <summary>
            法人微信号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.legal_persona_name">
            <summary>
            法人姓名
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ThirdFasteRegisterInfo.component_phone">
            <summary>
            第三方联系电话
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageEvent">
            <summary>
            所有RequestMessageShortEvent的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageEvent.EventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageEvent.EventName">
            <summary>
            获取事件类型的字符串
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageFile">
            <summary>
            所有RequestMessageShortFile的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageLink">
            <summary>
            所有RequestMessageLink的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageLocation">
            <summary>
            所有RequestMessageLocation的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageShortVideo">
            <summary>
            所有RequestMessageShortVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageText">
            <summary>
            所有RequestMessageText的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageText.Content">
            <summary>
            文本消息内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageVideo">
            <summary>
            所有RequestMessageVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageVoice">
            <summary>
            所有RequestMessageVoice的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageBase">
            <summary>
            请求消息基础接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageBase">
            <summary>
            接收到请求的消息基类
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageEvent">
            <summary>
            所有事件消息的基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageEvent.EventType">
            <summary>
            事件类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageEvent.EventName">
            <summary>
            获取事件类型的字符串
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.RequestMessageEvent.#ctor">
            <summary>
            RequestMessageEvent 构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageNeuChar">
            <summary>
            NeuChar 请求消息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageNeuChar.NeuCharMessageType">
            <summary>
            具体操作类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageNeuChar.ConfigRoot">
            <summary>
            设置信息（通常为JSON）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageNeuChar.RequestData">
            <summary>
            请求数据的 JSON 字符串
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageUnknownType">
            <summary>
            未知请求类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageUnknownType.RequestDocument">
            <summary>
            请求消息的XML对象（明文）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Article">
            <summary>
            文章
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Url">
            <summary>
            点击后跳转的链接
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.PicUrl">
            <summary>
            图文消息的图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80。如不填，在客户端不显示图片
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageMpNews">
            <summary>
            所有ResponseMessageMpNews的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageMusic">
            <summary>
            所有ResponseMessageMusic的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageNews">
            <summary>
            所有ResponseMessageNews的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IResponseMessageNews.ArticleCount">
            <summary>
            文章数量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IResponseMessageNews.Articles">
            <summary>
            文章列表，微信客户端只能输出前10条（可能未来数字会有变化，出于视觉效果考虑，建议控制在8条以内）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageNoResponse">
            <summary>
            当MessageHandler接收到IResponseNothing的返回类型参数时，只会向微信服务器返回空字符串，等同于return null
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageText">
            <summary>
            所有ResponseMessageText的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IResponseMessageText.Content">
            <summary>
            文本消息内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageTransfer_Customer_Service">
            <summary>
            所有ResponseMessageTransfer_Customer_Service的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageVideo">
            <summary>
            所有ResponseMessageVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageVoice">
            <summary>
            所有ResponseMessageVoice的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.title">
            <summary>
            图文消息的标题
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.thumb_media_id">
            <summary>
            图文消息缩略图的media_id, 可以在上传多媒体文件接口中获得。此处thumb_media_id即上传接口返回的media_id
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.author">
            <summary>
            图文消息的作者
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.content_source_url">
            <summary>
            图文消息点击“阅读原文”之后的页面链接
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.content">
            <summary>
            图文消息的内容，支持html标签
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.digest">
            <summary>
            图文消息的描述
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.show_cover_pic">
            <summary>
            是否显示封面，1为显示，0为不显示
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Music">
            <summary>
            Music
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Voice">
            <summary>
            Voice
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageBase">
            <summary>
            响应回复消息基类接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ResponseMessageBase">
            <summary>
            响应回复消息基类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromRequestMessage(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.ResponseMsgType,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            获取响应类型实例，并初始化
            <para>如果是直接调用，建议使用CreateFromRequestMessage&lt;T&gt;(IRequestMessageBase requestMessage)取代此方法</para>
            </summary>
            <param name="requestMessage">请求</param>
            <param name="msgType">响应类型</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromRequestMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            获取响应类型实例，并初始化
            </summary>
            <typeparam name="T">需要返回的类型</typeparam>
            <param name="requestMessage">请求数据</param>
            <param name="enlighten">MessageEntityEnlighten，当 T 为接口时必须提供</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromResponseXml(System.String,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            从返回结果XML转换成IResponseMessageBase实体类
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <param name="enlighten"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ResponseMessageNoResponse">
            <summary>
            当MessageHandler接收到IResponseNothing的返回类型参数时，只会向微信服务器返回空字符串，等同于return null
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ResponseMessageUnknownType">
            <summary>
            未知响应类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.ResponseMessageUnknownType.ResponseDocument">
            <summary>
            响应消息的XML对象（明文）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SuccessResponseMessage">
            <summary>
            只返回"success"等指定字符串的响应信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SuccessResponseMessageBase">
            <summary>
            只返回"success"等指定字符串的响应信息基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SuccessResponseMessageBase.ReturnText">
            <summary>
            返回字符串内容，默认为"success"
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.SuccessResponseMessageBase.#ctor">
            <summary>
            SuccessResponseMessage构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.IEncryptPostModel">
            <summary>
            接收加密信息统一接口（同时也支持非加密信息）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.DomainId">
            <summary>
            指定当前服务账号的唯一领域定义（主要为 APM 服务），例如 AppId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Msg_Signature">
            <summary>
            Msg_Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.EncodingAESKey">
            <summary>
            EncodingAESKey
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.EncryptPostModel">
            <summary>
            接收加密信息统一基类（同时也支持非加密信息）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.DomainId">
            <summary>
            指定当前服务账号的唯一领域定义（主要为 APM 服务），例如 AppId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Msg_Signature">
            <summary>
            Msg_Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.EncodingAESKey">
            <summary>
            EncodingAESKey
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.EncryptPostModel.SetSecretInfo(System.String,System.String)">
            <summary>
            设置服务器内部保密信息
            </summary>
            <param name="token"></param>
            <param name="encodingAESKey"></param>
        </member>
        <member name="T:Senparc.NeuChar.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.DataType.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.DataType.Unique">
            <summary>
            单项（唯一键）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ApiType">
            <summary>
            API 类型
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.ApiType.AccessToken">
            <summary>
            用于获取 AccessToken 凭证
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.ApiType.Normal">
            <summary>
            普通接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuCharActionType">
            <summary>
            NeuChar 消息的乐行
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.GetConfig">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.SaveConfig">
            <summary>
            储存配置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.CheckNeuChar">
            <summary>
            检查NeuChar服务是否可用，同时拉取 APM 统计数据
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.PushNeuCharAppConfig">
            <summary>
            推送 NeuChar App 的设置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.PullNeuCharAppConfig">
            <summary>
            拉取 NeuChar App 的设置
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.AppStoreState">
            <summary>
            AppStore状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.Enter">
            <summary>
            已进入应用状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.Exit">
            <summary>
            退出App状态（临时传输状态，退出后即为None）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.RequestMsgType">
            <summary>
            消息请求类型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ResponseMsgType">
            <summary>
            消息响应类型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.PlatformType">
            <summary>
            平台类型
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.General">
            <summary>
            通用
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.WeChat_OfficialAccount">
            <summary>
            微信公众号
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.WeChat_MiniProgram">
            <summary>
            微信小程序
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.WeChat_Work">
            <summary>
            微信企业号
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.WeChat_Open">
            <summary>
            微信开放平台
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.QQ_OfficialAccount">
            <summary>
            QQ公众号
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.PlatformType.DingDing">
            <summary>
            钉钉
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MenuButtonType">
            <summary>
            菜单按钮类型
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.click">
            <summary>
            点击
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.view">
            <summary>
            Url
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.miniprogram">
            <summary>
            小程序
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.scancode_push">
            <summary>
            扫码推事件
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.scancode_waitmsg">
            <summary>
            扫码推事件且弹出“消息接收中”提示框
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.pic_sysphoto">
            <summary>
            弹出系统拍照发图
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.pic_photo_or_album">
            <summary>
            弹出拍照或者相册发图
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.pic_weixin">
            <summary>
            弹出微信相册发图器
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.location_select">
            <summary>
            弹出地理位置选择器
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.media_id">
            <summary>
            下发消息（除文本消息）
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MenuButtonType.view_limited">
            <summary>
            跳转图文消息URL
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharApmKind.Message_Request">
            <summary>
            消息请求
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharApmKind.Message_SuccessResponse">
            <summary>
            成功返回
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharApmKind.Message_ResponseMillisecond">
            <summary>
            响应时间（毫秒）
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharApmKind.Message_Exception">
            <summary>
            消息处理异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.MessageHandlerException">
            <summary>
            MessageHandler异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.MiddlewareException">
            <summary>
            中间件异常信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.NeuCharException">
            <summary>
            MessageHandler异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.UnknownRequestMsgTypeException">
            <summary>
            未知请求类型异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Helpers.EntityHelper">
            <summary>
            实体帮助类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.FillEntityWithXml``1(``0,System.Xml.Linq.XDocument)">
            <summary>
            根据XML信息填充实实体
            </summary>
            <typeparam name="T">MessageBase为基类的类型，Response和Request都可以</typeparam>
            <param name="entity">实体</param>
            <param name="doc">XML</param>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.FillClassValue``1(System.Object,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo)">
            <summary>
            填充复杂类型的参数
            </summary>
            <typeparam name="T">复杂类型</typeparam>
            <param name="entity">被填充实体</param>
            <param name="root">XML节点</param>
            <param name="childElementName">XML下一级节点的名称</param>
            <param name="prop">属性对象</param>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.ConvertEntityToXml``1(``0)">
            <summary>
            将实体转为XML
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.ConvertEntityToXmlString``1(``0)">
            <summary>
            将实体转为XML字符串
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <param name="enlighten">MessageEntityEnlighten，当 T 为接口时必须提供</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener,Senparc.NeuChar.Entities.IRequestMessageBase)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="enlighten">MessageEntityEnlighten</param>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage(System.String,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            ResponseMessageBase.CreateFromResponseXml(xml)的扩展方法
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Helpers.MsgTypeHelper">
            <summary>
            消息类型帮助类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgTypeString(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgType(System.String)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetResponseMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetResponseMsgType(System.String)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Helpers.NeuralNodeHelper">
            <summary>
            NeuralNode 帮助类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.FillTextMessage(System.String)">
            <summary>
            处理文本信息占位符
            </summary>
            <param name="originContent"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.FillNewsMessage(System.String,Senparc.NeuChar.NeuralSystems.MaterialData)">
            <summary>
            处理图文消息
            </summary>
            <param name="originContent">id|id|id</param>
            <param name="data">素材资源库</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.GetImageMessageMediaId(Senparc.NeuChar.Entities.IRequestMessageBase,System.String)">
            <summary>
            处理图片信息MediaId填充
            </summary>
            <param name="requestMessage"></param>
            <param name="originContent"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.GetMaterialContent(System.String,Senparc.NeuChar.NeuralSystems.MaterialData)">
            <summary>
            获取响应素材内容
            </summary>
            <param name="materialId"></param>
            <param name="materialData"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.GetMaterialContent(Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.NeuralSystems.MaterialData)">
            <summary>
            获取响应素材内容
            </summary>
            <param name="responseConfig"></param>
            <param name="materialData"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.APMDomainConfig">
            <summary>
            NeuCharActionType.CheckNeuChar 下的 ConfigRoot 类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.APMDomainConfig.Domain">
            <summary>
            Domain 名称，默认为 AppId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.APMDomainConfig.RemoveData">
            <summary>
            是否读取后移除缓存信息（默认为 true）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent">
            <summary>
            在没有 override 的情况下，MessageHandler 事件异步方法的默认调用方法
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent.DefaultResponseMessageAsync">
            <summary>
            调用DefaultResponseMessageAsync()方法
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent.SelfSynicMethod">
            <summary>
            调用同名的同步方法（可能会导致执行会阻塞的过程）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageHandler`3">
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.NeuChar.基础功能，只为简化代码而设。
            </summary>
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.NeuChar.基础功能，只为简化代码而设。
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.MessageHandler`3._defaultMessageHandlerAsyncEvent">
            <summary>
            默认参数设置为 DefaultResponseMessageAsync
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.DefaultMessageHandlerAsyncEvent">
            <summary>
            <para>注意：当调用同步方法 Execute() 时，此参数会被强制设置为：SelfSynicMethod！</para>
            <para>MessageHandler 事件异步方法的默认调用方法（在没有override的情况下）。默认值：DefaultDefaultResponseMessageAsync。</para>
            <para>默认参数设置为 DefaultResponseMessageAsync，目的是为了确保默认状态下不会执行意料以外的代码，
            因此，如果需要在异步方法中调用同名的同步方法，请手动将此参数设置为SelfSynicMethod。</para>
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.GlobalMessageContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CurrentMessageContext">
            <summary>
            当前用户消息上下文（注意：次数据不会被缓存，每次都会重新从缓存读取。
            TODO：可创建一个临时缓存对象，但需要考虑同步问题
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.GetCurrentMessageContext">
            <summary>
            当前用户消息上下文（注意：次数据不会被缓存，每次都会重新从缓存读取。
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.GetUnsafeMessageContext">
            <summary>
            延迟载入的上下文对象，存放在内存中。注意：使用本地内存缓存时，会每次都花心，等效于 GetCurrentMessageContext()；使用分布式缓存时，不能保证此对象是实时的，如需获取实时对象，请使用 GetCurrentMessageContext() 方法
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.MessageIsRepeated">
            <summary>
            消息是否已经被去重
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.MessageEntityEnlightener">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ApiEnlightener">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CurrentMessageHandlerNode">
            <summary>
            默认 MessageHandlerNode 对象
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CurrentAppDataNode">
            <summary>
            当前 App 订阅信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
            如果是Senparc.NeuChar.QY，则应当和ResponseDocument一致；如果是Senparc.NeuChar.QY，则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ResponseMessage">
            <summary>
            响应实体
            正常情况下只有当执行Execute()方法后才可能有值。
            也可以结合Cancel，提前给ResponseMessage赋值。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UsingEcryptMessage">
            <summary>
            是否使用了加密消息格式
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.EcryptRequestDocument">
            <summary>
            原始的加密请求（如果不加密则为null）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UsingCompatibilityModelEcryptMessage">
            <summary>
            是否使用了兼容模式加密信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OnlyAllowEcryptMessage">
            <summary>
            当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.TextResponseMessage">
            <summary>
            文字类型返回消息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OmitRepeatedMessageFunc">
            <summary>
            动态去重判断委托，仅当返回值为false时，不使用消息去重功能
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.SpecialDeduplicationAction">
            <summary>
            每个具体框架内额外的去重条件。返回是否已经去重（true：需要去重，false：不需要去重）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.MarkRepeatedMessage">
            <summary>
            标记为已重复消息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.GetInsertMessageKey">
            <summary>
            获取执行 InsertMessage（不管是 Request 还是 Response）时候的同步锁的key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(System.IO.Stream,Senparc.NeuChar.IEncryptPostModel,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
            <param name="maxRecordCount"></param>
            <param name="postModel">需要传入到Init的参数</param>
            <param name="onlyAllowEcryptMessage">当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(System.Xml.Linq.XDocument,Senparc.NeuChar.IEncryptPostModel,System.Int32,System.Boolean)">
            <summary>
            使用postDataDocument的构造函数
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postModel">需要传入到Init的参数</param>
            <param name="onlyAllowEcryptMessage">当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(Senparc.NeuChar.Entities.RequestMessageBase,Senparc.NeuChar.IEncryptPostModel,System.Int32,System.Boolean)">
            <summary>
            <para>使用 requestMessageBase 的构造函数</para>
            <para>此构造函数仅提供给具体的类库进行测试使用，例如 Senparc.NeuChar.Work</para>
            </summary>
            <param name="requestMessageBase"></param>
            <param name="maxRecordCount"></param>
            <param name="postModel">需要传入到Init的参数</param>
            <param name="onlyAllowEcryptMessage">当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CommonInitialize(System.Xml.Linq.XDocument,System.Int32,Senparc.NeuChar.IEncryptPostModel,System.Boolean)">
            <summary>
            构造函数公用的初始化方法
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postModel"></param>
            <param name="onlyAllowEcryptMessage">当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.Init(System.Xml.Linq.XDocument,Senparc.NeuChar.IEncryptPostModel)">
            <summary>
            初始化，获取RequestDocument。（必须要完成 RequestMessage 数据赋值）.
            Init中需要对上下文添加当前消息（如果使用上下文）；以及判断消息的加密情况，对解密信息进行解密
            </summary>
            <param name="requestDocument"></param>
            <param name="postModel"></param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CreateResponseMessage``1">
            <summary>
            根据当前的 RequestMessage 创建指定类型（RT）的 ResponseMessage
            </summary>
            <typeparam name="TR"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OnExecuting">
            <summary>
            在 Execute() 之前运行，可以使用 CancelExcute=true 中断后续 Execute() 和 OnExecuted() 方法的执行
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.Execute">
            <summary>
            <para>执行微信请求（如果没有被 CancelExcute=true 中断）</para>
            <para>注意：此方法仍然会优先执行异步重写方法（如：OnTextRequest()），只在未重写对应事件的异步方法时（如： OnTextRequestAsync()），尝试查找同步重写方法</para>
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OnExecuted">
            <summary>
            在 Execute() 之后运行（如果没有被 CancelExcute=true 中断）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OnNeuCharRequestAsync(Senparc.NeuChar.Entities.RequestMessageNeuChar)">
            <summary>
            NeuChar 请求
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.GetLogPath">
            <summary>
            获取日志保存地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.SaveRequestMessageLog(System.String)">
            <summary>
            保存请求信息
            <para>测试时可开启此记录，帮助跟踪数据，使用前请确保App_Data文件夹存在，且有读写权限。</para>
            </summary>
            <param name="logPath">保存日志目录，默认为 ~/App_Data/&lt;模块类型&gt;/&lt;yyyy-MM-dd&gt;/</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.SaveResponseMessageLog(System.String)">
            <summary>
            保存响应信息
            <para>测试时可开启此记录，帮助跟踪数据，使用前请确保App_Data文件夹存在，且有读写权限。</para>
            </summary>
            <param name="logPath">保存日志目录，默认为 ~/App_Data/&lt;模块类型&gt;/&lt;yyyy-MM-dd&gt;/</param>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat">
            <summary>
            微信消息签名
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat.Token">
            <summary>
            在网站没有提供Token（或传入为null）的情况下的默认Token，建议在网站中进行配置。
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat.Check(System.String,Senparc.NeuChar.IEncryptPostModel)">
            <summary>
            检查签名是否正确
            </summary>
            <param name="signature"></param>
            <param name="postModel">需要提供：Timestamp、Nonce、Token</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat.Check(System.String,System.String,System.String,System.String)">
            <summary>
            检查签名是否正确
            </summary>
            <param name="signature"></param>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat.GetSignature(Senparc.NeuChar.IEncryptPostModel)">
            <summary>
            返回正确的签名
            </summary>
            <param name="postModel">需要提供：Timestamp、Nonce、Token</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.CheckSignatures.CheckSignatureWeChat.GetSignature(System.String,System.String,System.String)">
            <summary>
            返回正确的签名
            </summary>
            <param name="timestamp"></param>
            <param name="nonce"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener">
            <summary>
            MessageHandler初始化请求和响应消息的定义类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener.PlatformType">
            <summary>
            支持平台类型
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener.NewResponseMessageMpNews">
            <summary>
            素材多图文
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener.SuccessResponseMessage">
            <summary>
            默认为 SuccessResponseMessage 类型，返回字符串 "success"
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener.#ctor(Senparc.NeuChar.PlatformType)">
            <summary>
            MessageEntityEnlighten 构造函数
            </summary>
            <param name="platformType"></param>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase">
            <summary>
            IMessageHandlerExtensionProperties 接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.MessageIsRepeated">
            <summary>
            消息是否已经被去重
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.UsingEcryptMessage">
            <summary>
            是否使用了加密消息格式
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.UsingCompatibilityModelEcryptMessage">
            <summary>
            是否使用了兼容模式加密信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OnlyAllowEcryptMessage">
            <summary>
            当平台同时兼容明文消息和加密消息时，只允许处理加密消息（不允许处理明文消息），默认为 False
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.PostModel">
            <summary>
            PostModel
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OnExecuting">
            <summary>
            执行微信请求前触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.Execute">
            <summary>
            执行请求
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OnExecuted">
            <summary>
            执行微信请求后触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OnExecutingAsync(System.Threading.CancellationToken)">
            <summary>
            【异步方法】执行微信请求前触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            【异步方法】执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.BuildResponseMessageAsync(System.Threading.CancellationToken)">
            <summary>
            执行请求内部的消息整理逻辑
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerBase.OnExecutedAsync(System.Threading.CancellationToken)">
            <summary>
            【异步方法】执行微信请求后触发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandler`2">
            <summary>
            IMessageHandler 接口
            </summary>
            <typeparam name="TRequest">IRequestMessageBase</typeparam>
            <typeparam name="TResponse">IResponseMessageBase</typeparam>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.ResponseMessage">
            <summary>
            响应实体
            只有当执行Execute()方法后才可能有值
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument">
            <summary>
            为IMessageHandler单独提供XDocument类型的属性接口（主要是ResponseDocument）。
            分离这个接口的目的是为了在MvcExtension中对IMessageHandler解耦，使用IMessageHandlerDocument接口直接操作XML。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
             如果是Senparc.NeuChar.MP引用，并且未设置未加密，则应当和ResponseDocument一致；除此以外（Senparc.NeuChar.QY或已加密），则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.TextResponseMessage">
            <summary>
            文字返回信息。使用规则：当TextResponseMessage不为null时（""!=null），才获取ResponseDocument。
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener">
            <summary>
            用于提供MessageHandler中的“请求及响应”详细类型定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener.MessageEntityEnlightener">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener.ApiEnlightener">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerNeuralNodes">
            <summary>
            用于提供MessageHandler中的 NeuralSystem 的设置节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerNeuralNodes.CurrentMessageHandlerNode">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerNeuralNodes.CurrentAppDataNode">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext`3">
            <summary>
            具有上下文的 MessageHandler 接口
            </summary>
            <typeparam name="TMC"></typeparam>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext`3.GlobalMessageContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext`3.CurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext`3.GetCurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.MessageHandlerNode">
            <summary>
            MessageHandler 的神经节点
            </summary>
            <summary>
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.MaterialData">
            <summary>
            素材数据库
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.Config">
            <summary>
            设置信息（系统约定Config为固定名称）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.#ctor">
            <summary>
            MessageHandlerNode 构造函数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.Execute``3(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext{``0,``1,``2},System.String)">
            <summary>
            执行NeuChar判断过程，获取响应消息
            </summary>
            <param name="requestMessage"></param>
            <param name="messageHandler"></param>
            <param name="accessTokenOrApi"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.ExecuteAsync``3(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.IMessageHandlerWithContext{``0,``1,``2},System.String)">
            <summary>
            执行NeuChar判断过程，获取响应消息
            </summary>
            <param name="requestMessage"></param>
            <param name="messageHandler"></param>
            <param name="accessTokenOrApi"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.GetResponseMessage(Senparc.NeuChar.Entities.IRequestMessageBase,System.Collections.Generic.List{Senparc.NeuChar.NeuralSystems.Response},Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener,System.String)">
            <summary>
            获取响应消息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfigs"></param>
            <param name="messageHandler"></param>
            <param name="accessTokenOrApi"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.ExecuteApi(System.Collections.Generic.List{Senparc.NeuChar.NeuralSystems.Response},Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlightener,System.String,System.String)">
            <summary>
            执行API高级接口回复
            </summary>
            <param name="responses"></param>
            <param name="requestMessage"></param>
            <param name="enlightener"></param>
            <param name="accessTokenOrApi"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.RenderResponseMessageText(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            返回文字类型信息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.RenderResponseMessageNews(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            返回图文类型信息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <param name="enlighten"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.RenderResponseMessageImage(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            返回图片类型信息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.RenderResponseMessageNoResponse(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            不返回任何响应消息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageHandlerNode.RenderResponseMessageSuccessResponse(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.NeuralSystems.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlightener)">
            <summary>
            回复“成功”信息（默认为字符串success）
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.MessageReply">
            <summary>
            消息回复设置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessageReply.MessagePair">
            <summary>
            请求-响应 配置列表
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessageReply.#ctor">
            <summary>
            MessageReply 构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.MessagePair">
            <summary>
            请求-响应 配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Name">
            <summary>
            备注名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Id">
            <summary>
            唯一编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Version">
            <summary>
            版本号，如："2018.9.27.1"
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Request">
            <summary>
            请求条件设置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MessagePair.Responses">
            <summary>
            优先响应设置（至少一项）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.MessagePair.#ctor">
            <summary>
            MessagePair 构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.Request">
            <summary>
            请求配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.Request.Type">
            <summary>
            说明：目前只支持Text和Image
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.Request.Keywords">
            <summary>
            文本、事件的关键字
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.Response">
            <summary>
            响应配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.Response.Type">
            <summary>
            响应类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.Response.MaterialId">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.AppDataConfigs">
            <summary>
            APP 订阅设置（包含所有 APP 订阅）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataConfigs.AppDataItems">
            <summary>
            APP 订阅详情
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.AppDataItem">
            <summary>
            单项 App 订阅信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.Name">
            <summary>
            备注名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.Id">
            <summary>
            唯一编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.Version">
            <summary>
            版本号，如："2018.9.27.1"
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.ExpireTime">
            <summary>
            过期时间（Unix时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.ExpireDateTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.MessageEnterWord">
            <summary>
            进入对话状态关键词
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.MessageExitWord">
            <summary>
            退出对话关键词
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.MessageKeywords">
            <summary>
            消息关键词
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataItem.MessageKeepTime">
            <summary>
            状态保持分钟数（0为无状态）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.AppDataNode">
            <summary>
            订阅 APP 的信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.AppDataNode.Config">
            <summary>
            设置
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.ConfigRoot">
            <summary>
            用于传入设置的基础模型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.ConfigRoot.Configs">
            <summary>
            详细的配置信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.IConfigItem">
            <summary>
            配置项约束接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.IConfigItem.Name">
            <summary>
            备注名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.IConfigItem.Id">
            <summary>
            唯一编号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.IConfigItem.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.IConfigItem.Version">
            <summary>
            版本号，如："2018.9.27.1"
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.MaterialData">
            <summary>
            素材数据库
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.MaterialDataItem">
            <summary>
            素材数据库
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Name">
            <summary>
            备注名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Id">
            <summary>
            全局唯一编号（类似Guid）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Version">
            <summary>
            版本号，如："2018.9.27.1"
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Type">
            <summary>
            素材类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.MaterialDataItem.Content">
            <summary>
            素材内容
            <para>如果是多图文（News）类型，则对应ArticleData类型的JSON数据</para>
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.INeuralNodeConfig">
            <summary>
            节点设置信息接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.NeuralNodeConfig">
            <summary>
            节点设置信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.ChildrenNodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.Config">
            <summary>
            设置信息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.#ctor">
            <summary>
            BaseNeuralNode 构造函数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.BaseNeuralNode.SetChildNode(Senparc.NeuChar.NeuralSystems.INeuralNode)">
            <summary>
            设置子节点
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.INeuralNode.ChildrenNodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystems.INeuralNode.Config">
            <summary>
            默认设置数据
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystems.INeuralNode.SetChildNode(Senparc.NeuChar.NeuralSystems.INeuralNode)">
            <summary>
            设置子节点
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystems.RootNeuralNode">
            <summary>
            NeuralNode 根节点
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystem">
            <summary>
            神经系统，整个系统数据的根节点
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuralSystem.DEFAULT_CONFIG_FILE_CONENT">
            <summary>
            默认配置文件内容
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystem.NeuCharDomainName">
            <summary>
            NeuChar 域名
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.NeuralSystem.Root">
            <summary>
            根节点
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.#ctor">
            <summary>
            NeuChar 核心神经系统，包含所有神经节点信息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.InitRoot">
            <summary>
            初始化 Root 参数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.ReloadNode">
            <summary>
            加载节点信息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.GetNode(System.String,Senparc.NeuChar.NeuralSystems.INeuralNode)">
            <summary>
            获取指定Name的节点
            <para>TODO：建立索引搜索</para>
            </summary>
            <param name="name"></param>
            <param name="parentNode">父节点</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Register">
            <summary>
            NeuChar 注册
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Register.RegisterApiBindFinished">
            <summary>
            是否API绑定已经执行完
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Register.NeuralNodeRegisterCollection">
            <summary>
            节点类型注册集合
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Register.RegisterNeuralNode(System.String,System.Type)">
            <summary>
            注册节点
            </summary>
            <param name="name">唯一名称</param>
            <param name="type">节点类型</param>
        </member>
        <member name="F:Senparc.NeuChar.Register.RegisterApiBindLck">
            <summary>
            RegisterApiBind 执行锁
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Register.RegisterApiBind(System.Boolean)">
            <summary>
            自动扫描并注册 ApiBind
            </summary>
            <param name="forceBindAgain">是否强制重刷新</param>
        </member>
        <member name="T:Senparc.NeuChar.Utilities.ApiUtility">
            <summary>
            ApiUtility
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Utilities.ApiUtility.GetExpireTime(System.Int32)">
            <summary>
            获取过期时间
            </summary>
            <param name="expireInSeconds">有效时间（秒）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Utilities.ApiUtility.GetExpiryTimeSpan(System.Int32)">
            <summary>
            获取过期 TimeSpan
            </summary>
            <param name="expireInSeconds">有效时间（秒）</param>
            <returns></returns>
        </member>
    </members>
</doc>
